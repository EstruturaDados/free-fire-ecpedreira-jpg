#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ITENS 10

// =======================
// STRUCTS
// =======================
typedef struct {
    char nome[30];
    char tipo[20];
    int quantidade;
} Item;

// Para lista encadeada
typedef struct No {
    Item dados;
    struct No* proximo;
} No;

// =======================
// VARI√ÅVEIS GLOBAIS
// =======================

// Mochila com vetor
Item mochilaVetor[MAX_ITENS];
int totalVetor = 0;

// Mochila com lista encadeada
No* mochilaLista = NULL;

// Contadores de compara√ß√µes
int comparacoesSeq = 0;
int comparacoesBin = 0;

// =======================
// FUN√á√ïES VETOR
// =======================
void inserirItemVetor() {
    if (totalVetor >= MAX_ITENS) {
        printf("\n‚ö†Ô∏è Mochila (vetor) cheia!\n");
        return;
    }

    Item novo;
    printf("\n=== Inserir Item (Vetor) ===\n");
    printf("Nome: ");
    scanf(" %[^\n]", novo.nome);
    printf("Tipo: ");
    scanf(" %[^\n]", novo.tipo);
    printf("Quantidade: ");
    scanf("%d", &novo.quantidade);

    mochilaVetor[totalVetor++] = novo;
    printf("‚úÖ Item inserido no vetor!\n");
}

void removerItemVetor() {
    char nome[30];
    printf("\n=== Remover Item (Vetor) ===\n");
    printf("Nome: ");
    scanf(" %[^\n]", nome);

    for (int i = 0; i < totalVetor; i++) {
        if (strcmp(mochilaVetor[i].nome, nome) == 0) {
            mochilaVetor[i] = mochilaVetor[totalVetor - 1];
            totalVetor--;
            printf("‚úÖ Item removido do vetor!\n");
            return;
        }
    }
    printf("‚ö†Ô∏è Item n√£o encontrado no vetor.\n");
}

void listarItensVetor() {
    printf("\n=== Itens (Vetor) ===\n");
    if (totalVetor == 0) {
        printf("Mochila vazia.\n");
        return;
    }
    for (int i = 0; i < totalVetor; i++) {
        printf("%d) %s | %s | Qtd: %d\n",
               i + 1,
               mochilaVetor[i].nome,
               mochilaVetor[i].tipo,
               mochilaVetor[i].quantidade);
    }
}

void buscarSequencialVetor() {
    char nome[30];
    printf("\n=== Buscar Sequencial (Vetor) ===\n");
    printf("Nome: ");
    scanf(" %[^\n]", nome);

    comparacoesSeq = 0;
    for (int i = 0; i < totalVetor; i++) {
        comparacoesSeq++;
        if (strcmp(mochilaVetor[i].nome, nome) == 0) {
            printf("‚úÖ Encontrado: %s | %s | Qtd: %d\n",
                   mochilaVetor[i].nome,
                   mochilaVetor[i].tipo,
                   mochilaVetor[i].quantidade);
            printf("üî¢ Compara√ß√µes: %d\n", comparacoesSeq);
            return;
        }
    }
    printf("‚ö†Ô∏è Item n√£o encontrado. Compara√ß√µes: %d\n", comparacoesSeq);
}

void ordenarVetor() {
    printf("\n=== Ordenando Mochila (Vetor) ===\n");
    for (int i = 0; i < totalVetor - 1; i++) {
        for (int j = i + 1; j < totalVetor; j++) {
            if (strcmp(mochilaVetor[i].nome, mochilaVetor[j].nome) > 0) {
                Item temp = mochilaVetor[i];
                mochilaVetor[i] = mochilaVetor[j];
                mochilaVetor[j] = temp;
            }
        }
    }
    printf("‚úÖ Mochila ordenada por nome!\n");
}

void buscarBinariaVetor() {
    char nome[30];
    printf("\n=== Busca Bin√°ria (Vetor) ===\n");
    printf("Nome: ");
    scanf(" %[^\n]", nome);

    int inicio = 0, fim = totalVetor - 1, meio;
    comparacoesBin = 0;

    while (inicio <= fim) {
        meio = (inicio + fim) / 2;
        comparacoesBin++;
        int cmp = strcmp(mochilaVetor[meio].nome, nome);
        if (cmp == 0) {
            printf("‚úÖ Encontrado: %s | %s | Qtd: %d\n",
                   mochilaVetor[meio].nome,
                   mochilaVetor[meio].tipo,
                   mochilaVetor[meio].quantidade);
            printf("üî¢ Compara√ß√µes: %d\n", comparacoesBin);
            return;
        } else if (cmp < 0) {
            inicio = meio + 1;
        } else {
            fim = meio - 1;
        }
    }
    printf("‚ö†Ô∏è Item n√£o encontrado. Compara√ß√µes: %d\n", comparacoesBin);
}

// =======================
// FUN√á√ïES LISTA ENCADEADA
// =======================
void inserirItemLista() {
    No* novo = (No*)malloc(sizeof(No));
    if (!novo) {
        printf("Erro de aloca√ß√£o.\n");
        return;
    }

    printf("\n=== Inserir Item (Lista) ===\n");
    printf("Nome: ");
    scanf(" %[^\n]", novo->dados.nome);
    printf("Tipo: ");
    scanf(" %[^\n]", novo->dados.tipo);
    printf("Quantidade: ");
    scanf("%d", &novo->dados.quantidade);

    novo->proximo = mochilaLista;
    mochilaLista = novo;
    printf("‚úÖ Item inserido na lista!\n");
}

void removerItemLista() {
    char nome[30];
    printf("\n=== Remover Item (Lista) ===\n");
    printf("Nome: ");
    scanf(" %[^\n]", nome);

    No* atual = mochilaLista;
    No* anterior = NULL;

    while (atual != NULL) {
        if (strcmp(atual->dados.nome, nome) == 0) {
            if (anterior == NULL) {
                mochilaLista = atual->proximo;
            } else {
                anterior->proximo = atual->proximo;
            }
            free(atual);
            printf("‚úÖ Item removido da lista!\n");
            return;
        }
        anterior = atual;
        atual = atual->proximo;
    }
    printf("‚ö†Ô∏è Item n√£o encontrado na lista.\n");
}

void listarItensLista() {
    printf("\n=== Itens (Lista) ===\n");
    if (mochilaLista == NULL) {
        printf("Mochila vazia.\n");
        return;
    }
    No* atual = mochilaLista;
    int i = 1;
    while (atual != NULL) {
        printf("%d) %s | %s | Qtd: %d\n",
               i++,
               atual->dados.nome,
               atual->dados.tipo,
               atual->dados.quantidade);
        atual = atual->proximo;
    }
}

void buscarSequencialLista() {
    char nome[30];
    printf("\n=== Buscar Sequencial (Lista) ===\n");
    printf("Nome: ");
    scanf(" %[^\n]", nome);

    comparacoesSeq = 0;
    No* atual = mochilaLista;
    while (atual != NULL) {
        comparacoesSeq++;
        if (strcmp(atual->dados.nome, nome) == 0) {
            printf("‚úÖ Encontrado: %s | %s | Qtd: %d\n",
                   atual->dados.nome,
                   atual->dados.tipo,
                   atual->dados.quantidade);
            printf("üî¢ Compara√ß√µes: %d\n", comparacoesSeq);
            return;
        }
        atual = atual->proximo;
    }
    printf("‚ö†Ô∏è Item n√£o encontrado. Compara√ß√µes: %d\n", comparacoesSeq);
}

// =======================
// MENU PRINCIPAL
// =======================
int main() {
    int escolhaEstrutura, opcao;

    do {
        printf("\n====================\n");
        printf("   üéí Sistema de Mochila\n");
        printf("====================\n");
        printf("1 - Usar Vetor\n");
        printf("2 - Usar Lista Encadeada\n");
        printf("0 - Sair\n");
        printf("Escolha: ");
        scanf("%d", &escolhaEstrutura);

        if (escolhaEstrutura == 1) {
            do {
                printf("\n--- Mochila com Vetor ---\n");
                printf("1 - Inserir\n");
                printf("2 - Remover\n");
                printf("3 - Listar\n");
                printf("4 - Buscar Sequencial\n");
                printf("5 - Ordenar\n");
                printf("6 - Buscar Bin√°ria\n");
                printf("0 - Voltar\n");
                printf("Escolha: ");
                scanf("%d", &opcao);

                switch (opcao) {
                    case 1: inserirItemVetor(); break;
                    case 2: removerItemVetor(); break;
                    case 3: listarItensVetor(); break;
                    case 4: buscarSequencialVetor(); break;
                    case 5: ordenarVetor(); break;
                    case 6: buscarBinariaVetor(); break;
                }
            } while (opcao != 0);
        }

        else if (escolhaEstrutura == 2) {
            do {
                printf("\n--- Mochila com Lista ---\n");
                printf("1 - Inserir\n");
                printf("2 - Remover\n");
                printf("3 - Listar\n");
                printf("4 - Buscar Sequencial\n");
                printf("0 - Voltar\n");
                printf("Escolha: ");
                scanf("%d", &opcao);

                switch (opcao) {
                    case 1: inserirItemLista(); break;
                    case 2: removerItemLista(); break;
                    case 3: listarItensLista(); break;
                    case 4: buscarSequencialLista(); break;
                }
            } while (opcao != 0);
        }

    } while (escolhaEstrutura != 0);

    printf("\nüëã Saindo do sistema...\n");
    return 0;
}
